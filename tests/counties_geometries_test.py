import unittest
import datafactory as df
import pandas as pd
from shapely.geometry import Point, Polygon, shape
import json


class TestGeoCounties(unittest.TestCase):
    AUTAUGA_JSON = json.loads('{ "type": "Feature", "properties": { "GEO_ID": "0500000US01001", "STATE": "01", "COUNTY": "001", "NAME": "Autauga", "LSAD": "County", "CENSUSAREA": 594.436000 }, "geometry": { "type": "Polygon", "coordinates": [ [ [ -86.524693, 32.707057 ], [ -86.524434, 32.707058 ], [ -86.439632, 32.708213 ], [ -86.413116, 32.707386 ], [ -86.413035, 32.687713 ], [ -86.412877, 32.648913 ], [ -86.412826, 32.635879 ], [ -86.412589, 32.612423 ], [ -86.412522, 32.596806 ], [ -86.412497, 32.589422 ], [ -86.412462, 32.582985 ], [ -86.412446, 32.579324 ], [ -86.412377, 32.556969 ], [ -86.412242, 32.530292 ], [ -86.412229, 32.528746 ], [ -86.412338, 32.505731 ], [ -86.412342, 32.503781 ], [ -86.412342, 32.503680 ], [ -86.412285, 32.502219 ], [ -86.412232, 32.500854 ], [ -86.412201, 32.499963 ], [ -86.412188, 32.499338 ], [ -86.412125, 32.496257 ], [ -86.412073, 32.493105 ], [ -86.411981, 32.491740 ], [ -86.411972, 32.491633 ], [ -86.411972, 32.491417 ], [ -86.411973, 32.489355 ], [ -86.411971, 32.485754 ], [ -86.411873, 32.481417 ], [ -86.411870, 32.481121 ], [ -86.411818, 32.475703 ], [ -86.411803, 32.474156 ], [ -86.411675, 32.459798 ], [ -86.411581, 32.443303 ], [ -86.411489, 32.436185 ], [ -86.411374, 32.425108 ], [ -86.411348, 32.423997 ], [ -86.411172, 32.409937 ], [ -86.425072, 32.402437 ], [ -86.430010, 32.401480 ], [ -86.436130, 32.400940 ], [ -86.440876, 32.400016 ], [ -86.444721, 32.399841 ], [ -86.447696, 32.400703 ], [ -86.453037, 32.404808 ], [ -86.456273, 32.405837 ], [ -86.458759, 32.405731 ], [ -86.460560, 32.404701 ], [ -86.461277, 32.403473 ], [ -86.461048, 32.401573 ], [ -86.459339, 32.397514 ], [ -86.459140, 32.395781 ], [ -86.462055, 32.390304 ], [ -86.462574, 32.388365 ], [ -86.461750, 32.380820 ], [ -86.462497, 32.378135 ], [ -86.463564, 32.377288 ], [ -86.468891, 32.373237 ], [ -86.470920, 32.371360 ], [ -86.473255, 32.368470 ], [ -86.474949, 32.365600 ], [ -86.476703, 32.364418 ], [ -86.479603, 32.364609 ], [ -86.483769, 32.366776 ], [ -86.485997, 32.366936 ], [ -86.488820, 32.366104 ], [ -86.491902, 32.364327 ], [ -86.492772, 32.361587 ], [ -86.492299, 32.359077 ], [ -86.489949, 32.352691 ], [ -86.489766, 32.350472 ], [ -86.490712, 32.347054 ], [ -86.492741, 32.345231 ], [ -86.496774, 32.344437 ], [ -86.502944, 32.343541 ], [ -86.520054, 32.340333 ], [ -86.532531, 32.338775 ], [ -86.535668, 32.340440 ], [ -86.537215, 32.341262 ], [ -86.539251, 32.345200 ], [ -86.542537, 32.363517 ], [ -86.544042, 32.366356 ], [ -86.547899, 32.369242 ], [ -86.558946, 32.369033 ], [ -86.570551, 32.375006 ], [ -86.575392, 32.376080 ], [ -86.580921, 32.375464 ], [ -86.581873, 32.375019 ], [ -86.588261, 32.367749 ], [ -86.590571, 32.362125 ], [ -86.592865, 32.361668 ], [ -86.595335, 32.361345 ], [ -86.614841, 32.374266 ], [ -86.616220, 32.377356 ], [ -86.616619, 32.379904 ], [ -86.616071, 32.382638 ], [ -86.614074, 32.388302 ], [ -86.613176, 32.393948 ], [ -86.613453, 32.398584 ], [ -86.615485, 32.403066 ], [ -86.618000, 32.405717 ], [ -86.621405, 32.406682 ], [ -86.622856, 32.406647 ], [ -86.624978, 32.404728 ], [ -86.628712, 32.402769 ], [ -86.633057, 32.402046 ], [ -86.639547, 32.402966 ], [ -86.642459, 32.402926 ], [ -86.645410, 32.402296 ], [ -86.649559, 32.400554 ], [ -86.651507, 32.399317 ], [ -86.653419, 32.397247 ], [ -86.654528, 32.394716 ], [ -86.655790, 32.388689 ], [ -86.654034, 32.383884 ], [ -86.653837, 32.380687 ], [ -86.655597, 32.376147 ], [ -86.661230, 32.371397 ], [ -86.667497, 32.365077 ], [ -86.677215, 32.356630 ], [ -86.681314, 32.353883 ], [ -86.683537, 32.353395 ], [ -86.686199, 32.353735 ], [ -86.696960, 32.357594 ], [ -86.703595, 32.358795 ], [ -86.711337, 32.360767 ], [ -86.713372, 32.362077 ], [ -86.714118, 32.362887 ], [ -86.715362, 32.367759 ], [ -86.716239, 32.369214 ], [ -86.719028, 32.372059 ], [ -86.719431, 32.373438 ], [ -86.719893, 32.376699 ], [ -86.718983, 32.380401 ], [ -86.719273, 32.385140 ], [ -86.719967, 32.391154 ], [ -86.719268, 32.393720 ], [ -86.717812, 32.396001 ], [ -86.717193, 32.400367 ], [ -86.717897, 32.402814 ], [ -86.720954, 32.404812 ], [ -86.724072, 32.405327 ], [ -86.727181, 32.404497 ], [ -86.732323, 32.398848 ], [ -86.737372, 32.394730 ], [ -86.742157, 32.391751 ], [ -86.746598, 32.389806 ], [ -86.748514, 32.389350 ], [ -86.749981, 32.389105 ], [ -86.757398, 32.389239 ], [ -86.761265, 32.389926 ], [ -86.763543, 32.390697 ], [ -86.769425, 32.393976 ], [ -86.771681, 32.394796 ], [ -86.774765, 32.395150 ], [ -86.778365, 32.394601 ], [ -86.780021, 32.393742 ], [ -86.782141, 32.390473 ], [ -86.782280, 32.388877 ], [ -86.781516, 32.384956 ], [ -86.781243, 32.379472 ], [ -86.782467, 32.375137 ], [ -86.782218, 32.370288 ], [ -86.780447, 32.368600 ], [ -86.773163, 32.340728 ], [ -86.791073, 32.314611 ], [ -86.798268, 32.308632 ], [ -86.810802, 32.307574 ], [ -86.816107, 32.309970 ], [ -86.818446, 32.312798 ], [ -86.820273, 32.315007 ], [ -86.820921, 32.333240 ], [ -86.819706, 32.336799 ], [ -86.814912, 32.340803 ], [ -86.809259, 32.345501 ], [ -86.807438, 32.348593 ], [ -86.806867, 32.351781 ], [ -86.807378, 32.354356 ], [ -86.810986, 32.361207 ], [ -86.812406, 32.364727 ], [ -86.815399, 32.370821 ], [ -86.817664, 32.373056 ], [ -86.822067, 32.375137 ], [ -86.827244, 32.378816 ], [ -86.830079, 32.382458 ], [ -86.833644, 32.389640 ], [ -86.837069, 32.393203 ], [ -86.840336, 32.395563 ], [ -86.843758, 32.400416 ], [ -86.846149, 32.409725 ], [ -86.846074, 32.412475 ], [ -86.845448, 32.415416 ], [ -86.843781, 32.417067 ], [ -86.841099, 32.418490 ], [ -86.836393, 32.420143 ], [ -86.828082, 32.420749 ], [ -86.824579, 32.423186 ], [ -86.825084, 32.425718 ], [ -86.828371, 32.428207 ], [ -86.832896, 32.429765 ], [ -86.837081, 32.430497 ], [ -86.841522, 32.431787 ], [ -86.844802, 32.434083 ], [ -86.848192, 32.437193 ], [ -86.851284, 32.438746 ], [ -86.855291, 32.438512 ], [ -86.859657, 32.440216 ], [ -86.862262, 32.438736 ], [ -86.864331, 32.439445 ], [ -86.865533, 32.437840 ], [ -86.866663, 32.437798 ], [ -86.867090, 32.439188 ], [ -86.865726, 32.441612 ], [ -86.866231, 32.443759 ], [ -86.864920, 32.444155 ], [ -86.864606, 32.445724 ], [ -86.862307, 32.446841 ], [ -86.861835, 32.448711 ], [ -86.860056, 32.450861 ], [ -86.861970, 32.454244 ], [ -86.862426, 32.456451 ], [ -86.864761, 32.458559 ], [ -86.868932, 32.458078 ], [ -86.869776, 32.458899 ], [ -86.870112, 32.461955 ], [ -86.871172, 32.463973 ], [ -86.870588, 32.467138 ], [ -86.869343, 32.468527 ], [ -86.871271, 32.469026 ], [ -86.873112, 32.468632 ], [ -86.873839, 32.470459 ], [ -86.873480, 32.472459 ], [ -86.875413, 32.472731 ], [ -86.877044, 32.474514 ], [ -86.877757, 32.478633 ], [ -86.881726, 32.480060 ], [ -86.882001, 32.481265 ], [ -86.883723, 32.481216 ], [ -86.885158, 32.482227 ], [ -86.881523, 32.483904 ], [ -86.879799, 32.484080 ], [ -86.880499, 32.485736 ], [ -86.879090, 32.486967 ], [ -86.879431, 32.488038 ], [ -86.884316, 32.491065 ], [ -86.882252, 32.492264 ], [ -86.883130, 32.494048 ], [ -86.882928, 32.494577 ], [ -86.882367, 32.495935 ], [ -86.884287, 32.496211 ], [ -86.885088, 32.498778 ], [ -86.887675, 32.501367 ], [ -86.889640, 32.501829 ], [ -86.890581, 32.502974 ], [ -86.890649, 32.505718 ], [ -86.889678, 32.510208 ], [ -86.891596, 32.510968 ], [ -86.890920, 32.513606 ], [ -86.893808, 32.514221 ], [ -86.895312, 32.516402 ], [ -86.894779, 32.520901 ], [ -86.895712, 32.522229 ], [ -86.899508, 32.525398 ], [ -86.901284, 32.527813 ], [ -86.901894, 32.529564 ], [ -86.903682, 32.531087 ], [ -86.901308, 32.532179 ], [ -86.901069, 32.533299 ], [ -86.902607, 32.536679 ], [ -86.906667, 32.536850 ], [ -86.906040, 32.539962 ], [ -86.903096, 32.540626 ], [ -86.903925, 32.542074 ], [ -86.906688, 32.543522 ], [ -86.905947, 32.545126 ], [ -86.905915, 32.547297 ], [ -86.903797, 32.551738 ], [ -86.904782, 32.553579 ], [ -86.902514, 32.555494 ], [ -86.900709, 32.555918 ], [ -86.899601, 32.556989 ], [ -86.900533, 32.558563 ], [ -86.899458, 32.560414 ], [ -86.899138, 32.564242 ], [ -86.897968, 32.566848 ], [ -86.900151, 32.569310 ], [ -86.901312, 32.575229 ], [ -86.898783, 32.577831 ], [ -86.903718, 32.583401 ], [ -86.902960, 32.586328 ], [ -86.904776, 32.587715 ], [ -86.905428, 32.588693 ], [ -86.905297, 32.590809 ], [ -86.903894, 32.593096 ], [ -86.904957, 32.595981 ], [ -86.906234, 32.597485 ], [ -86.906272, 32.599869 ], [ -86.905677, 32.601002 ], [ -86.906556, 32.604004 ], [ -86.908554, 32.606319 ], [ -86.906236, 32.607399 ], [ -86.906113, 32.608299 ], [ -86.909807, 32.608081 ], [ -86.909733, 32.610757 ], [ -86.911775, 32.611376 ], [ -86.911962, 32.612192 ], [ -86.909652, 32.613598 ], [ -86.910164, 32.615763 ], [ -86.909637, 32.617669 ], [ -86.912050, 32.619121 ], [ -86.911233, 32.623671 ], [ -86.912822, 32.625051 ], [ -86.911230, 32.627018 ], [ -86.910859, 32.629088 ], [ -86.911904, 32.631783 ], [ -86.912785, 32.632202 ], [ -86.912833, 32.633954 ], [ -86.913967, 32.635896 ], [ -86.913780, 32.637354 ], [ -86.915540, 32.638039 ], [ -86.915920, 32.640458 ], [ -86.918099, 32.642059 ], [ -86.918817, 32.644278 ], [ -86.917341, 32.646953 ], [ -86.914713, 32.646756 ], [ -86.913187, 32.648018 ], [ -86.915049, 32.650292 ], [ -86.918152, 32.651356 ], [ -86.917991, 32.653978 ], [ -86.921145, 32.656230 ], [ -86.921196, 32.657542 ], [ -86.920411, 32.660077 ], [ -86.917595, 32.664169 ], [ -86.914610, 32.664355 ], [ -86.816574, 32.660117 ], [ -86.771532, 32.660717 ], [ -86.731640, 32.661518 ], [ -86.726564, 32.661577 ], [ -86.713390, 32.661732 ], [ -86.713472, 32.666217 ], [ -86.714219, 32.705694 ], [ -86.693530, 32.705905 ], [ -86.653695, 32.706187 ], [ -86.626190, 32.706381 ], [ -86.620711, 32.706260 ], [ -86.611651, 32.706352 ], [ -86.560171, 32.706877 ], [ -86.554725, 32.706933 ], [ -86.524693, 32.707057 ] ] ] } }')

    def test_get_geometry_by_fips(self):
        counties_gdf = df.CountiesGeom()
        geom = counties_gdf.get_geometry_by_fips('01001')
        self.assertIsNotNone(geom)

    def test_get_geometry_by_fips_nodata(self):
        counties_gdf = df.CountiesGeom()
        geom = counties_gdf.get_geometry_by_fips('01002')
        self.assertIsNone(geom)

    def test_get_name_category_geometry_by_fips(self):
        counties_gdf = df.CountiesGeom()
        name, category, geometry = counties_gdf.get_name_category_geometry_by_fips('01001')
        self.assertEqual(name, 'Autauga')
        self.assertEqual(category, 'County')
        self.assertIsNotNone(geometry)

    def test_get_name_category_geometry_by_fips_nodata(self):
        counties_gdf = df.CountiesGeom()
        name, category, geometry = counties_gdf.get_name_category_geometry_by_fips('01002')
        self.assertEqual(name, None)
        self.assertEqual(category, None)
        self.assertEqual(geometry, None)

    def __get_the_test_geometry(self):
        autauga = shape(self.AUTAUGA_JSON["geometry"])
        return autauga

    def test_get_n_random_points(self):
        counties_gdf = df.CountiesGeom()
        n_points = 10
        points = counties_gdf.get_n_random_points_within_fips(n_points, '01001')
        self.assertEqual(len(points), n_points)

    def test_get_n_random_points_within_fips(self):
        counties_gdf = df.CountiesGeom()
        autauga_polygon = self.__get_the_test_geometry()
        n_points = 10
        points = counties_gdf.get_n_random_points_within_fips(n_points, '01001')
        for point in points:
            sp = Point(point)
            is_within = sp.within(autauga_polygon)
            self.assertTrue(is_within)

